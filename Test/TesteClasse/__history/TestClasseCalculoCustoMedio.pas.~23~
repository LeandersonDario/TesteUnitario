unit TestClasseCalculoCustoMedio;
{
Desenvolvida por Dario projeto Piloto o princípio AAA – Arrange, Act e Assert.

 Principios
 Siga o princípio AAA – Arrange, Act e Assert.
 Arrange – preparar todas as condições necessárias para a execução do teste.
 Act – executar o que será testado.
 Assert – validar as informações depois do teste.
}

interface

uses
  TestFramework,
  classes,
  forms,
  uCalculoCustoMedio,
  dialogs,
  uInterfaceCalculoCustoMedio,
  SysUtils,
  uInterfaceTXT,
  uTXT;
const
	cArquivo = 'ArquivoTeste.txt';

type
  // Test methods for class tCalucoCustoMedio

  TesttCalucoCustoMedio = class(TTestCase)
  private
    FtCalucoCustoMedio: tCalucoCustoMedio;
    Flista : TStringList;
    FtTxt: tTxt;
    Procedure ListaDadosTXT();

  public
    procedure SetUp(); override;
    procedure TearDown(); override;
  published
    [Test]
    procedure Calcula_custo_medio();
    procedure Resgatar_Parametros_DadosConexao_CadastroNotaFiscalEntrada();
  end;

implementation

procedure TesttCalucoCustoMedio.SetUp();
begin
  FtCalucoCustoMedio := tCalucoCustoMedio.Create;
  FtTxt := tTxt.Create;
  if not FileExists(FtTxt.Obter_diretorio_Arquivo_TXT) then
    begin
	  ListaDadosTXT;
      Flista := FtTxt.Carrega_Configuracao_Diretorio_Arquivo_TXT(cArquivo);
	end
	else
	Flista := FtTxt.Buscar_diretorio_Arquivo_TXT;
end;

procedure TesttCalucoCustoMedio.TearDown();
begin
  FtCalucoCustoMedio.Free;
  FtCalucoCustoMedio := nil;
end;

procedure TesttCalucoCustoMedio.Calcula_custo_medio();
var
  Resultado: Double;

begin
  Resultado := FtCalucoCustoMedio.Calcula_custo_medio(10,10,10,10,10,10);
  CheckEquals(Resultado,10,'Resultado dentro do parametro eperado');

end;

procedure TesttCalucoCustoMedio.ListaDadosTXT();
begin
    Flista := TStringList.Create;
  try
    Flista.Add('server name=pat1567');
    Flista.Add('database name=Wise800');
    Flista.Add('usuário=supervisor');
    Flista.Add('senha=123456');
	  Flista.Add('Empresa=1');
	  Flista.Add('Dt. emissao inicial=18122019');
	  Flista.Add('Dt. emissao final=18122019');
	  Flista.Add('número da NFe=126545');
	  Flista.Add('data de emissao=18122019');
	  Flista.Add('data de referencia=18122019');
	  Flista.Add('cliente= 000003');
	  Flista.Add('operacao de entrada= 000001');
	  Flista.Add('empresa do estoque= 000001');
	  Flista.Add('empresa do financeiro= 000001');
	  Flista.Add('produto= 000067');
	  Flista.Add('quantidade= 1');
	  Flista.Add('vl. unitário=1000');
	  Flista.Add('setor= 000001');
	  Flista.Add('cfop=1.102');
	  Flista.Add('origem=0');
	  Flista.Add('sit. tributária=40');
	  Flista.Add('vl.total=1000');
	  Flista.Add('setor de entrada= 000001');
	  Flista.Add('Prazo= 000030');
	  Flista.Add('numero título= 126545-1');
	  Flista.Add('vencimento=18122019');
	  Flista.Add('valor= 1000');
    Flista.Add('forma de pagamento= 000005');

    Flista.SaveToFile(cArquivo);
  finally
    Flista.Free;
  end;
end;

procedure TesttCalucoCustoMedio.Resgatar_parametros_DadosConexao_cadastroNotaFiscalEntrada();
begin
  //Valida acesso ao bimer
  CheckEquals('pat1567', Flista.Values['server name'],'O parâmetro Server name é inválido.');
  CheckEquals('Wise800', Flista.Values['database name'],'O parâmetro Database name é inválido.');
  CheckEquals('supervisor', Flista.Values['usuário'],'O parâmetro Usuário é inválido.');
  CheckEquals('123456', Flista.Values['senha'],'O parâmetro Senha é inválido.');
  //Informações da tela principal do nota fiscal de entrada.
  CheckEquals('1', Flista.Values['Empresa'], 'O parâmetro Empresa é inválido.');
  CheckEquals('18122019', Flista.Values['Dt. emissao inicial'], 'O parâmetro Dt. emissao inicial é inválido.');
  CheckEquals('18122019', Flista.Values['Dt. emissao final'], 'O parâmetro Dt. emissao final é inválido.');
  //Cadastro de nota de entrada simples sem imposto informações da capa
  CheckEquals('126545', Flista.Values['número da NFe'], 'O parâmetro número da NF-e é inválido.');
  CheckEquals('18122019', Flista.Values['data de emissao'], 'O parâmetro data de emissao é inválido.');
  CheckEquals('18122019', Flista.Values['data de referencia'], 'O parâmetro data de referencia é inválido.');
  CheckEquals('000003', Flista.Values['cliente'], 'O parâmetro cliente é inválido.');
  CheckEquals('000001', Flista.Values['operacao de entrada'], 'O parâmetro operacao de entrada é inválido.');
  CheckEquals('000001', Flista.Values['empresa do estoque'], 'O parâmetro empresa do estoque é inválido.');
  CheckEquals('000001', Flista.Values['empresa do financeiro'], 'O parâmetro empresa do financeiro é inválido.');
  //Informações do item
  CheckEquals('000067', Flista.Values['produto'], 'O parâmetro produto é inválido.');
  CheckEquals('1', Flista.Values['quantidade'], 'O parâmetro quantidade é inválido.');
  CheckEquals('1000', Flista.Values['vl. unitário'], 'O parâmetro vl. unitário, é inválido.');
  CheckEquals('000001', Flista.Values['setor'], 'O parâmetro setor é inválido.');
  CheckEquals('1.102', Flista.Values['cfop'], 'O parâmetro cfop é inválido.');
  CheckEquals('0', Flista.Values['origem'], 'O parâmetro origem é inválido.');
  CheckEquals('40', Flista.Values['sit. tributária'], 'O parâmetro sit. tributária é inválido.');
  CheckEquals('1000', Flista.Values['vl.total'], 'O parâmetro vl.total é inválido.');
  //Dados gerais
  CheckEquals('000001', Flista.Values['setor de entrada'], 'O parâmetro setor de entrada é inválido.');
  //Prazo
  CheckEquals('000030', Flista.Values['Prazo'], 'O parâmetro Prazo é inválido.');
  CheckEquals('126545-1', Flista.Values['numero título'], 'O parâmetro numero título é inválido.');
  CheckEquals('18122019', Flista.Values['vencimento'], 'O parâmetro vencimento é inválido.');
  CheckEquals('1000', Flista.Values['valor'], 'O parâmetro valor é inválido.');
  CheckEquals('000005', Flista.Values['forma de pagamento'], 'O parâmetro forma de pagamento é inválido.');

end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TesttCalucoCustoMedio.Suite);
end.

